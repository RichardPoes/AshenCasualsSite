@using System.Security.Claims
@attribute [Route("profile")]
@inject AuthenticationStateProvider AuthenticationStateProvider

<section class="mb-4">

    <h1 class="mb-4">Authorize View Component</h1>

    <AuthorizeView>
        <Authorized>
            <h2 class="mb-4">Hello, @context.User.Identity?.Name</h2>

            <table class="table">
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var claim in context.User.Claims)
                    {
                        <tr>
                            <td>@claim.Type</td>
                            <td>@claim.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        </Authorized>
    </AuthorizeView>

</section>

<section class="mb-4">

    <h1 class="mb-4">Authentication State</h1>

    <h2 class="mb-4">Hello, @AuthenticationStateUser.Identity?.Name</h2>

    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var claim in AuthenticationStateUser.Claims)
            {
                <tr>
                    <td>@claim.Type</td>
                    <td>@claim.Value</td>
                </tr>
            }
        </tbody>
    </table>

</section>

<section class="mb-4">

    <h1 class="mb-4">Authentication State Provider</h1>

    <h2 class="mb-4">Hello, @AuthenticationStateProviderUser.Identity?.Name</h2>

    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var claim in AuthenticationStateProviderUser.Claims)
            {
                <tr>
                    <td>@claim.Type</td>
                    <td>@claim.Value</td>
                </tr>
            }
        </tbody>
    </table>

</section>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private ClaimsPrincipal? AuthenticationStateUser { get; set; }
    private ClaimsPrincipal? AuthenticationStateProviderUser { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        AuthenticationStateUser = authenticationState.User;

        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        AuthenticationStateProviderUser = authenticationState.User;
    }
}